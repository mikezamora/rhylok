/**
 * Example host application that loads and runs an Extism WASM plugin
 * generated by vite-plugin-extism
 */

import { readFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

// Note: In a real application, you would install @extism/extism:
// npm install @extism/extism
// import { Plugin } from '@extism/extism'

const __dirname = dirname(fileURLToPath(import.meta.url))

/**
 * Mock Extism Plugin class for demonstration
 * In production, use the real @extism/extism package
 */
class MockExtismPlugin {
  constructor(manifest, hostFunctions = {}) {
    this.manifest = manifest
    this.hostFunctions = hostFunctions
    this.wasmModule = null
    console.log('🔌 Plugin initialized with manifest:', JSON.stringify(manifest, null, 2))
  }

  async call(functionName, ...args) {
    console.log(`📞 Calling WASM function: ${functionName}(${args.join(', ')})`)
    
    // Simulate different function responses
    switch (functionName) {
      case 'initGame':
        this.hostFunctions.log?.('Game initialized in WASM module')
        return null
        
      case 'startGame':
        this.hostFunctions.log?.('Starting new game...')
        this.hostFunctions.playSound?.('game_start', 0.8)
        return null
        
      case 'processAudio':
        const [level, freq] = args
        const beatDetected = Math.random() > 0.7 // Simulate beat detection
        if (beatDetected) {
          this.hostFunctions.playSound?.('beat_hit', 0.7)
          this.hostFunctions.log?.(`Beat detected! Level: ${level}, Freq: ${freq}`)
        }
        return beatDetected ? 1 : 0
        
      case 'getScore':
        return Math.floor(Math.random() * 1000) // Mock score
        
      case 'getLevel':
        return Math.floor(Math.random() * 5) + 1 // Mock level
        
      case 'getGameState':
        return JSON.stringify({
          score: Math.floor(Math.random() * 1000),
          level: Math.floor(Math.random() * 5) + 1,
          isPlaying: true,
          currentTime: Date.now()
        })
        
      case 'handleInput':
        const [inputType, inputValue] = args
        this.hostFunctions.log?.(`Input received: type=${inputType}, value=${inputValue}`)
        if (inputValue === 32) { // Spacebar
          this.hostFunctions.playSound?.('key_hit', 0.5)
        }
        return null
        
      default:
        console.warn(`Unknown function: ${functionName}`)
        return null
    }
  }
}

/**
 * Host function implementations
 * These functions are called by the WASM module
 */
const hostFunctions = {
  /**
   * Log function - called when WASM module wants to log something
   */
  log: (message) => {
    console.log(`📝 [WASM Log]: ${message}`)
  },

  /**
   * Play sound function - called when WASM module wants to play audio
   */
  playSound: (soundName, volume) => {
    console.log(`🔊 Playing sound: ${soundName} at volume ${volume}`)
    // In a real application, this would trigger actual audio playback
    // For example, using Web Audio API or a sound library
    return 1 // Return success status
  },

  /**
   * Get time function - called when WASM module needs current timestamp
   */
  getTime: () => {
    const time = Date.now()
    console.log(`⏰ Host time requested: ${time}`)
    return time
  },

  /**
   * HTTP request function - called when WASM module needs to make HTTP requests
   */
  httpRequest: (method, url) => {
    console.log(`🌐 HTTP ${method} request to: ${url}`)
    // In a real application, this would make actual HTTP requests
    return JSON.stringify({ status: 200, data: 'Mock response' })
  }
}

/**
 * Load and initialize the Extism plugin
 */
async function loadPlugin() {
  try {
    // Load the manifest file generated by vite-plugin-extism
    const manifestPath = join(__dirname, 'dist-extism', 'manifest.json')
    const manifestContent = readFileSync(manifestPath, 'utf-8')
    const manifest = JSON.parse(manifestContent)
    
    console.log('📋 Loaded manifest from:', manifestPath)
    
    // Create the plugin instance
    const plugin = new MockExtismPlugin(manifest, hostFunctions)
    
    return plugin
  } catch (error) {
    console.error('❌ Failed to load plugin:', error.message)
    console.log('\n💡 To generate the plugin, run:')
    console.log('   npx vite build --config vite.config.extism.ts')
    process.exit(1)
  }
}

/**
 * Simulate a rhythm game session
 */
async function simulateGameSession(plugin) {
  console.log('\n🎮 Starting rhythm game simulation...\n')

  // Initialize the game
  await plugin.call('initGame')
  
  // Start the game
  await plugin.call('startGame')
  
  console.log('\n🎵 Simulating audio input and gameplay...\n')
  
  // Simulate audio processing and user input
  for (let i = 0; i < 10; i++) {
    // Simulate audio levels and frequencies
    const audioLevel = Math.random()
    const frequency = 60 + Math.random() * 200 // 60-260 Hz
    
    // Process audio for beat detection
    const beatDetected = await plugin.call('processAudio', audioLevel, frequency)
    
    // Simulate occasional user input
    if (Math.random() > 0.7) {
      await plugin.call('handleInput', 1, 32) // Keyboard spacebar
    }
    
    // Get current game state
    const score = await plugin.call('getScore')
    const level = await plugin.call('getLevel')
    
    console.log(`📊 Score: ${score}, Level: ${level}`)
    
    // Wait a bit between iterations
    await new Promise(resolve => setTimeout(resolve, 500))
  }
  
  // Get final game state
  const finalState = await plugin.call('getGameState')
  console.log('\n🏁 Final game state:', finalState)
  
  console.log('\n🎮 Game simulation complete!')
}

/**
 * Demonstrate plugin configuration
 */
async function demonstrateConfiguration(plugin) {
  console.log('\n⚙️  Plugin Configuration Demo:\n')
  
  // Show manifest configuration
  console.log('📋 Manifest config:', plugin.manifest.config)
  console.log('💾 Memory limits:', plugin.manifest.memory)
  console.log('⏱️  Timeout:', plugin.manifest.timeout_ms, 'ms')
  
  // Test configuration passing
  const testConfig = JSON.stringify({
    debug: true,
    difficulty: 'hard',
    theme: 'neon'
  })
  
  console.log('🔧 Sending configuration to plugin...')
  await plugin.call('configure', testConfig)
}

/**
 * Main application entry point
 */
async function main() {
  console.log('🚀 Extism WASM Plugin Host Application')
  console.log('=====================================\n')
  
  // Load the plugin
  const plugin = await loadPlugin()
  
  // Demonstrate configuration
  await demonstrateConfiguration(plugin)
  
  // Run game simulation
  await simulateGameSession(plugin)
  
  console.log('\n✨ Demo complete! The WASM plugin was successfully loaded and executed.')
  console.log('\n📚 Next steps:')
  console.log('   1. Install real Extism: npm install @extism/extism')
  console.log('   2. Replace MockExtismPlugin with real Plugin class')
  console.log('   3. Implement actual host functions for your use case')
  console.log('   4. Build your WASM module: npx vite build --config vite.config.extism.ts')
}

// Run the demo
main().catch(console.error)
